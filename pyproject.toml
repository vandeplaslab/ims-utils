[build-system]
requires = [
  "setuptools >= 42",
  "wheel",
  "build",
  "setuptools_scm[toml]>=3.4"
]
build-backend = "setuptools.build_meta"

# https://peps.python.org/pep-0621/
[project]
name = "ims-utils"
description = "Spectrum utilities."
readme = "README.md"
requires-python = ">=3.8"
license = { text = "BSD 3-Clause License" }
authors = [
    { email = "lukas.migas@yahoo.com", name = "Lukasz G. Migas" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
    "numpy",
    "scipy",
    "numba",
    "koyo",
    "msalign",
    "plotly",
    "loguru",
    "tqdm",
]

# extras
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
oms = [
    "pyopenms>=2.7.0; python_version < '3.10'"
]
batch = [
    "pandas",
    "scikit-learn",
    "mpire",
    "patsy",
]
test = ["pytest>=6.0", "pytest-cov", "pytest-pretty"]
dev = [
    "black",
    "ipython",
    "mypy",
    "pdbpp",
    "pre-commit",
    "rich",
    "ruff",
    "ims_utils[test]",
]

[project.urls]
homepage = "https://github.com/vandeplaslab/ims-utils"
repository = "https://github.com/vandeplaslab/ims-utils"

# same as console_scripts entry point
# [project.scripts]
# spam-cli = "spam:main_cli"

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# [project.entry-points."spam.magical"]
# tomatoes = "spam:main_tomatoes"

[tool.setuptools_scm]
write_to = "src/ims_utils/_version.py"

# https://github.com/psf/black
[tool.black]
line-length = 120
target-version = ['py37', 'py38', 'py39']
include = '\.pyi?$'


# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 120
target-version = "py38"
src = ["src"]
# https://beta.ruff.rs/docs/rules/
extend-select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "I",    # isort
    "UP",    # pyupgrade
    # "S",    # bandit
    "C4",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
]
# I do this to get numpy-style docstrings AND retain
# D417 (Missing argument descriptions in the docstring)
# otherwise, see:
# https://beta.ruff.rs/docs/faq/#does-ruff-support-numpy-or-google-style-docstrings
# https://github.com/charliermarsh/ruff/issues/2606
extend-ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line should be in imperative mood
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
]

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D", "S"]
"setup.py" = ["D"]

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
console_output_style = "count"
testpaths = ["tests"]
filterwarnings = [
    "error:::ims_utils", # turn warnings from ims_utils into errors
    "ignore::DeprecationWarning:mpire",
]
# options so that i can see the stdout and loguru logs
addopts = [
    "-s", "--maxfail=5",  "--durations=10",  "-ra", "--strict-markers", "--strict-config",
#    "--log-cli-level=DEBUG", "--log-cli-format=%(asctime)s - %(levelname)s - %(message)s"
]

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

# # module specific overrides
# [[tool.mypy.overrides]]
# module = ["numpy.*",]
# ignore_errors = true


# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
]

[tool.coverage.run]
source = ["ims_utils"]

# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "tests/**/*",
    ".idea/**/*",
    "_version.py"
]

# # for things that require compilation
# # https://cibuildwheel.readthedocs.io/en/stable/options/
# [tool.cibuildwheel]
# # Skip 32-bit builds & PyPy wheels on all platforms
# skip = ["*-manylinux_i686", "*-musllinux_i686", "*-win32", "pp*"]
# test-extras = ["test"]
# test-command = "pytest {project}/tests -v"
# test-skip = "*-musllinux*"

# [tool.cibuildwheel.environment]
# HATCH_BUILD_HOOKS_ENABLE = "1"
